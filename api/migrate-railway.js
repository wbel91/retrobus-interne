const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function migrateRailway() {
  console.log('üöÄ Migration R√©troReports pour Railway...\n');
  
  try {
    // 1. V√©rifier la connexion
    console.log('1Ô∏è‚É£ Test connexion Railway...');
    await prisma.$connect();
    console.log('‚úÖ Connect√© √† Railway PostgreSQL\n');

    // 2. V√©rifier si les tables existent
    console.log('2Ô∏è‚É£ V√©rification des tables...');
    try {
      const tables = await prisma.$queryRaw`
        SELECT table_name 
        FROM information_schema.tables 
        WHERE table_schema = 'public' 
        AND table_name IN ('retro_reports', 'retro_report_comments')
      `;
      console.log('üìã Tables trouv√©es:', tables);

      if (tables.length < 2) {
        console.log('‚ö†Ô∏è Tables manquantes. Lancement de la migration...');
        
        // Cr√©er les tables si elles n'existent pas
        await prisma.$executeRaw`
          CREATE TABLE IF NOT EXISTS "retro_reports" (
            "id" TEXT NOT NULL,
            "title" TEXT NOT NULL,
            "description" TEXT NOT NULL,
            "category" TEXT,
            "priority" TEXT NOT NULL DEFAULT 'medium',
            "status" TEXT NOT NULL DEFAULT 'open',
            "type" TEXT NOT NULL DEFAULT 'bug',
            "assignedTo" TEXT,
            "createdBy" TEXT NOT NULL,
            "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
            "updatedAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
            CONSTRAINT "retro_reports_pkey" PRIMARY KEY ("id")
          );
        `;
        
        await prisma.$executeRaw`
          CREATE TABLE IF NOT EXISTS "retro_report_comments" (
            "id" TEXT NOT NULL,
            "reportId" TEXT NOT NULL,
            "message" TEXT NOT NULL,
            "author" TEXT NOT NULL,
            "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
            CONSTRAINT "retro_report_comments_pkey" PRIMARY KEY ("id"),
            CONSTRAINT "retro_report_comments_reportId_fkey" FOREIGN KEY ("reportId") REFERENCES "retro_reports"("id") ON DELETE CASCADE ON UPDATE CASCADE
          );
        `;
        
        console.log('‚úÖ Tables cr√©√©es sur Railway');
      } else {
        console.log('‚úÖ Tables d√©j√† pr√©sentes sur Railway');
      }
    } catch (e) {
      console.log('‚ùå Erreur v√©rification tables:', e.message);
    }

    // 3. Test de fonctionnement
    console.log('\n3Ô∏è‚É£ Test de fonctionnement...');
    
    const testReport = await prisma.retroReport.create({
      data: {
        title: 'Test Migration Railway',
        description: 'Test pour v√©rifier que la migration fonctionne sur Railway',
        category: 'Test',
        priority: 'low',
        type: 'other',
        status: 'open',
        createdBy: 'migration@railway.com'
      }
    });
    
    console.log('‚úÖ Test report cr√©√©:', testReport.id);

    // Test commentaire
    const testComment = await prisma.retroReportComment.create({
      data: {
        reportId: testReport.id,
        message: 'Commentaire de test migration Railway',
        author: 'migration@railway.com'
      }
    });
    
    console.log('‚úÖ Test commentaire cr√©√©:', testComment.id);

    // Nettoyage
    await prisma.retroReportComment.delete({ where: { id: testComment.id } });
    await prisma.retroReport.delete({ where: { id: testReport.id } });
    console.log('‚úÖ Nettoyage termin√©');

    console.log('\nüéâ Migration Railway termin√©e avec succ√®s !');
    console.log('üöÄ Le serveur Railway est pr√™t pour les R√©troReports');

  } catch (error) {
    console.error('\n‚ùå Erreur migration Railway:', error);
    
    if (error.message.includes('connect')) {
      console.log('\nüí° V√©rifiez:');
      console.log('   - La variable DATABASE_URL est correcte');
      console.log('   - La base PostgreSQL Railway est accessible');
    }
  } finally {
    await prisma.$disconnect();
  }
}

if (require.main === module) {
  migrateRailway()
    .then(() => process.exit(0))
    .catch(() => process.exit(1));
}

module.exports = { migrateRailway };