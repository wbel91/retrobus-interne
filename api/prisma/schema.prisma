generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"  // ✅ PAS sqlite
  url      = env("DATABASE_URL")
}

model Vehicle {
  id                Int       @id @default(autoincrement())
  parc              String    @unique
  type              String
  modele            String
  marque            String?
  subtitle          String?
  immat             String?
  etat              String
  miseEnCirculation DateTime?
  energie           String?
  description       String?
  history           String?
  caracteristiques  String?
  gallery           String?
  backgroundImage   String?
  backgroundPosition String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relations
  usages  Usage[]
  reports Report[]
  events  Event[]   @relation("EventVehicle")
}

model Usage {
  id           Int       @id @default(autoincrement())
  parc         String
  startedAt    DateTime
  endedAt      DateTime?
  conducteur   String?
  participants String?
  note         String?
  relatedTo    String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Relations
  vehicle Vehicle @relation(fields: [parc], references: [parc], onDelete: Cascade)
  reports Report[]
}

model Report {
  id         Int      @id @default(autoincrement())
  parc       String
  usageId    Int?
  description String?
  filesMeta  String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  vehicle Vehicle @relation(fields: [parc], references: [parc], onDelete: Cascade)
  usage   Usage?  @relation(fields: [usageId], references: [id], onDelete: SetNull)
}

model Flash {
  id        Int      @id @default(autoincrement())
  content   String
  type      String   @default("info")
  active    Boolean  @default(true)
  expiresAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum EventStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

model Event {
  id           String      @id
  title        String
  date         DateTime
  time         String?
  location     String?
  description  String?
  helloAssoUrl String?
  adultPrice   Float?
  childPrice   Float?
  vehicleId    String?
  status       EventStatus @default(DRAFT)
  layout       String?
  extras       String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  // Relations
  vehicle       Vehicle?            @relation("EventVehicle", fields: [vehicleId], references: [parc])
  registrations EventRegistration[]
}

model EventRegistration {
  id                  String   @id @default(cuid())
  eventId             String
  participantName     String
  participantEmail    String
  adultTickets        Int      @default(1)
  childTickets        Int      @default(0)
  totalAmount         Float
  paymentMethod       String   @default("helloasso")
  helloAssoStatus     String   @default("PENDING")
  helloAssoOrderId    String?
  qrCodeData          String?
  ticketSent          Boolean  @default(false)
  registrationDate    DateTime @default(now())

  // Relations
  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@index([eventId])
  @@index([participantEmail])
}

model NewsletterSubscriber {
  id        String   @id @default(cuid())
  email     String   @unique
  status    String   @default("CONFIRMED")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model NewsletterCampaign {
  id          String   @id @default(cuid())
  title       String
  subject     String
  content     String
  status      String   @default("DRAFT")
  scheduledAt DateTime?
  sentAt      DateTime?
  recipientCount Int?
  successCount   Int?
  failureCount   Int?
  createdBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum MembershipType {
  STANDARD
  FAMILY
  STUDENT
  HONORARY
  LIFETIME
}

enum MembershipStatus {
  PENDING
  ACTIVE
  EXPIRED
  SUSPENDED
  CANCELLED
}

enum MemberRole {
  MEMBER
  DRIVER
  ADMIN
  BUREAU
}

enum DocumentType {
  DRIVING_LICENSE
  IDENTITY_CARD
  INSURANCE_RECORD
  MEMBERSHIP_FORM
  MEDICAL_CERTIFICATE
  OTHER
}

enum DocumentStatus {
  PENDING
  APPROVED
  REJECTED
  EXPIRED
}

model Member {
  id                       String    @id @default(cuid())
  memberNumber             String    @unique
  firstName                String
  lastName                 String
  email                    String    @unique
  phone                    String?
  address                  String?
  city                     String?
  postalCode               String?
  birthDate                DateTime?
  
  // Adhésion
  membershipType           MembershipType   @default(STANDARD)
  membershipStatus         MembershipStatus @default(PENDING)
  joinDate                 DateTime  @default(now())
  renewalDate              DateTime?
  lastPaymentDate          DateTime?
  paymentAmount            Float?
  paymentMethod            String?
  
  // Accès et rôles
  role                     MemberRole @default(MEMBER)
  hasExternalAccess        Boolean   @default(false)
  hasInternalAccess        Boolean   @default(false)
  internalPassword         String?
  
  // Système de connexion
  matricule                String?   @unique // Identifiant de connexion
  loginEnabled            Boolean   @default(false)
  temporaryPassword       String?   // Mot de passe temporaire généré
  mustChangePassword      Boolean   @default(false) // Force changement à la première connexion
  lastLoginAt             DateTime? // Dernière connexion
  passwordChangedAt       DateTime? // Dernière modification du mot de passe
  loginAttempts           Int       @default(0) // Tentatives de connexion échouées
  lockedUntil             DateTime? // Verrouillage temporaire après trop de tentatives
  
  // Informations conducteur
  driverLicense            String?
  licenseExpiryDate        DateTime?
  medicalCertificateDate   DateTime?
  emergencyContact         String?
  emergencyPhone           String?
  driverCertifications     String[]
  vehicleAuthorizations    String[]
  maxPassengers            Int?
  driverNotes              String?
  
  // Préférences
  newsletter        Boolean  @default(true)
  notifications     Boolean  @default(true)
  
  // Métadonnées
  notes             String?
  createdBy         String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relations
  documents Document[]
}

model Document {
  id            String   @id @default(cuid())
  memberId      String
  type          DocumentType
  fileName      String
  filePath      String
  fileSize      Int?
  mimeType      String?
  expiryDate    DateTime?
  status        DocumentStatus @default(PENDING)
  reviewedBy    String?
  reviewedAt    DateTime?
  reviewNotes   String?
  uploadedAt    DateTime @default(now())

  // Relations
  member Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  @@index([memberId])
  @@index([type])
  @@index([status])
  @@index([expiryDate])
}

model Changelog {
  id        Int      @id @default(autoincrement())
  title     String
  version   String
  date      DateTime @default(now())
  changes   String   // JSON.stringify(string[])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
