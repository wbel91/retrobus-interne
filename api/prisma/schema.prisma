generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"  // ✅ PAS sqlite
  url      = env("DATABASE_URL")
}

model Vehicle {
  id                Int       @id @default(autoincrement())
  parc              String    @unique
  type              String
  modele            String
  marque            String?
  subtitle          String?
  immat             String?
  etat              String
  miseEnCirculation DateTime?
  energie           String?
  description       String?
  history           String?
  caracteristiques  String?
  gallery           String?
  backgroundImage   String?
  backgroundPosition String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relations
  usages  Usage[]
  reports Report[]
  events  Event[]   @relation("EventVehicle")
}

model Usage {
  id           Int       @id @default(autoincrement())
  parc         String
  startedAt    DateTime
  endedAt      DateTime?
  conducteur   String?
  participants String?
  note         String?
  relatedTo    String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Relations
  vehicle Vehicle @relation(fields: [parc], references: [parc], onDelete: Cascade)
  reports Report[]
}

model Report {
  id         Int      @id @default(autoincrement())
  parc       String
  usageId    Int?
  description String?
  filesMeta  String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  vehicle Vehicle @relation(fields: [parc], references: [parc], onDelete: Cascade)
  usage   Usage?  @relation(fields: [usageId], references: [id], onDelete: SetNull)
}

model Flash {
  id        Int      @id @default(autoincrement())
  content   String
  type      String   @default("info")
  active    Boolean  @default(true)
  expiresAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum EventStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

model Event {
  id           String      @id
  title        String
  date         DateTime
  time         String?
  location     String?
  description  String?
  helloAssoUrl String?
  adultPrice   Float?
  childPrice   Float?
  vehicleId    String?
  status       EventStatus @default(DRAFT)
  layout       String?
  extras       String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  // Relations
  vehicle       Vehicle?            @relation("EventVehicle", fields: [vehicleId], references: [parc])
  registrations EventRegistration[]
}

model EventRegistration {
  id                  String   @id @default(cuid())
  eventId             String
  participantName     String
  participantEmail    String
  adultTickets        Int      @default(1)
  childTickets        Int      @default(0)
  totalAmount         Float
  paymentMethod       String   @default("helloasso")
  helloAssoStatus     String   @default("PENDING")
  helloAssoOrderId    String?
  qrCodeData          String?
  ticketSent          Boolean  @default(false)
  registrationDate    DateTime @default(now())

  // Relations
  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@index([eventId])
  @@index([participantEmail])
}

model NewsletterSubscriber {
  id        String   @id @default(cuid())
  email     String   @unique
  status    String   @default("CONFIRMED")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model NewsletterCampaign {
  id          String   @id @default(cuid())
  title       String
  subject     String
  content     String
  status      String   @default("DRAFT")
  scheduledAt DateTime?
  sentAt      DateTime?
  recipientCount Int?
  successCount   Int?
  failureCount   Int?
  createdBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum MembershipType {
  STANDARD
  FAMILY
  STUDENT
  HONORARY
  LIFETIME
}

enum MembershipStatus {
  PENDING
  ACTIVE
  EXPIRED
  SUSPENDED
  CANCELLED
}

enum MemberRole {
  MEMBER
  DRIVER
  ADMIN
  BUREAU
}

enum DocumentType {
  DRIVING_LICENSE
  IDENTITY_CARD
  INSURANCE_RECORD
  MEMBERSHIP_FORM
  MEDICAL_CERTIFICATE
  OTHER
}

enum DocumentStatus {
  PENDING
  APPROVED
  REJECTED
  EXPIRED
}

model Member {
  id                       String    @id @default(cuid())
  memberNumber             String    @unique
  firstName                String
  lastName                 String
  email                    String    @unique
  phone                    String?
  address                  String?
  city                     String?
  postalCode               String?
  birthDate                DateTime?
  
  // Adhésion
  membershipType           MembershipType   @default(STANDARD)
  membershipStatus         MembershipStatus @default(PENDING)
  joinDate                 DateTime  @default(now())
  renewalDate              DateTime?
  lastPaymentDate          DateTime?
  paymentAmount            Float?
  paymentMethod            String?
  
  // Accès et rôles
  role                     MemberRole @default(MEMBER)
  hasExternalAccess        Boolean   @default(false)
  hasInternalAccess        Boolean   @default(false)
  internalPassword         String?
  
  // Système de connexion
  matricule                String?   @unique // Identifiant de connexion
  loginEnabled            Boolean   @default(false)
  temporaryPassword       String?   // Mot de passe temporaire généré
  mustChangePassword      Boolean   @default(false) // Force changement à la première connexion
  lastLoginAt             DateTime? // Dernière connexion
  passwordChangedAt       DateTime? // Dernière modification du mot de passe
  loginAttempts           Int       @default(0) // Tentatives de connexion échouées
  lockedUntil             DateTime? // Verrouillage temporaire après trop de tentatives
  
  // Informations conducteur
  driverLicense            String?
  licenseExpiryDate        DateTime?
  medicalCertificateDate   DateTime?
  emergencyContact         String?
  emergencyPhone           String?
  driverCertifications     String[]
  vehicleAuthorizations    String[]
  maxPassengers            Int?
  driverNotes              String?
  
  // Préférences
  newsletter        Boolean  @default(true)
  notifications     Boolean  @default(true)
  
  // Métadonnées
  notes             String?
  createdBy         String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relations
  documents Document[]
}

model Document {
  id            String   @id @default(cuid())
  memberId      String
  type          DocumentType
  fileName      String
  filePath      String
  fileSize      Int?
  mimeType      String?
  expiryDate    DateTime?
  status        DocumentStatus @default(PENDING)
  reviewedBy    String?
  reviewedAt    DateTime?
  reviewNotes   String?
  uploadedAt    DateTime @default(now())

  // Relations
  member Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  @@index([memberId])
  @@index([type])
  @@index([status])
  @@index([expiryDate])
}

model Changelog {
  id        Int      @id @default(autoincrement())
  title     String
  version   String
  date      DateTime @default(now())
  changes   String   // JSON.stringify(string[])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// ---------- Stock Management ----------

enum StockStatus {
  AVAILABLE
  LOW_STOCK
  OUT_OF_STOCK
  DISCONTINUED
  RESERVED
}

enum StockCategory {
  PIECES_DETACHEES
  CONSOMMABLES
  OUTILLAGE
  EQUIPEMENT
  DOCUMENTATION
  MERCHANDISING
  FOURNITURES
  SECURITE
  GENERAL
}

enum StockUnit {
  PIECE
  KG
  LITRE
  METRE
  PAQUET
  BOITE
  ROULEAU
  SET
  AUTRE
}

enum MovementType {
  IN          // Entrée (achat, retour, don)
  OUT         // Sortie (utilisation, vente, perte)
  ADJUSTMENT  // Correction d'inventaire
}

model Stock {
  id              Int           @id @default(autoincrement())
  reference       String?       @unique // Référence interne
  barcode         String?       // Code-barres
  name            String        // Nom de l'article
  description     String?       // Description détaillée
  category        StockCategory @default(GENERAL)
  subcategory     String?       // Sous-catégorie libre
  
  // Quantités
  quantity        Int           @default(0)
  minQuantity     Int           @default(0) // Seuil d'alerte stock bas
  unit            StockUnit     @default(PIECE)
  
  // Localisation et fournisseur
  location        String?       // Emplacement physique
  supplier        String?       // Fournisseur principal
  
  // Prix
  purchasePrice   Float?        // Prix d'achat unitaire
  salePrice       Float?        // Prix de vente unitaire
  
  // État et dates
  status          StockStatus   @default(AVAILABLE)
  lastRestockDate DateTime?     // Dernière date de réapprovisionnement
  expiryDate      DateTime?     // Date d'expiration si applicable
  
  // Métadonnées
  notes           String?       // Notes diverses
  createdBy       String        // Utilisateur créateur
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  // Relations
  movements       StockMovement[]
  
  @@index([category])
  @@index([status])
  @@index([quantity])
  @@index([name])
}

model StockMovement {
  id               Int          @id @default(autoincrement())
  stockId          Int
  type             MovementType
  quantity         Int          // Quantité du mouvement
  previousQuantity Int          // Quantité avant le mouvement
  newQuantity      Int          // Quantité après le mouvement
  reason           String?      // Raison du mouvement
  notes            String?      // Notes sur le mouvement
  userId           String       // Utilisateur qui a effectué le mouvement
  createdAt        DateTime     @default(now())
  
  // Relations
  stock Stock @relation(fields: [stockId], references: [id], onDelete: Cascade)
  
  @@index([stockId])
  @@index([type])
  @@index([createdAt])
}

model ScheduledOperation {
  id          String    @id @default(cuid())
  type        String    // 'recette' ou 'depense'
  description String
  amount      Float
  dueDate     DateTime? // Optionnel - peut être null
  category    String?
  recurring   String    @default("none") // 'none', 'monthly', 'quarterly', 'yearly'
  notes       String?
  isExecuted  Boolean   @default(false)
  createdBy   String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("scheduled_operations")
}

model RetroReport {
  id          String                @id @default(cuid())
  title       String
  description String
  category    String?
  priority    String                @default("medium") // 'low', 'medium', 'high', 'critical'
  status      String                @default("open")   // 'open', 'in_progress', 'resolved', 'closed'
  type        String                @default("bug")    // 'bug', 'feature', 'performance', 'security', 'other'
  assignedTo  String?
  createdBy   String
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @updatedAt
  comments    RetroReportComment[]

  @@map("retro_reports")
}

model RetroReportComment {
  id        String      @id @default(cuid())
  reportId  String
  message   String
  author    String
  createdAt DateTime    @default(now())
  report    RetroReport @relation(fields: [reportId], references: [id], onDelete: Cascade)

  @@map("retro_report_comments")
}
